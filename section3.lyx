#LyX 1.5.6 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass article
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Section
Specific Requirements
\end_layout

\begin_layout Subsection
External Interface Requirements
\end_layout

\begin_layout Subsubsection
User Interfaces
\end_layout

\begin_layout Standard
The primary goals of the NCS user interfaces are accessibility, universality,
 and reachability.
 The user interface is comprised of input and output devices.
 The input devices shall have the following components:
\end_layout

\begin_layout Itemize
Touch Screen
\end_layout

\begin_deeper
\begin_layout Itemize
The touch screen interface must be unscrachable, finger controlable, and
 multi touchable.
\end_layout

\end_deeper
\begin_layout Itemize
Mobile Device
\end_layout

\begin_deeper
\begin_layout Itemize
The mobile device interface must be small, attachable, and compatible across
 different devices.
\end_layout

\end_deeper
\begin_layout Itemize
Voice Recognition
\end_layout

\begin_deeper
\begin_layout Itemize
The voice recognition system must accurately understand commands and, be
 able to handle noisy environments.
\end_layout

\end_deeper
\begin_layout Itemize
Remote Controls
\end_layout

\begin_deeper
\begin_layout Itemize
The remote control must be simple, have big buttons, and have universal
 compatibility with devices in the smart home.
\end_layout

\end_deeper
\begin_layout Itemize
Motion Detector
\end_layout

\begin_deeper
\begin_layout Itemize
The motion detector must be able to accurately detect motion with out error.
 It also must be able to operate in low and no light conditions.
\end_layout

\end_deeper
\begin_layout Standard
The NCS user interface shall also support the following output methods:
\end_layout

\begin_layout Itemize
TV
\end_layout

\begin_deeper
\begin_layout Itemize
The television output device must be able to display information in a large
 and easy to read format.
 
\end_layout

\end_deeper
\begin_layout Itemize
Mobile Device 
\end_layout

\begin_deeper
\begin_layout Itemize
The mobile device output must be able to display Wireless Markup Language
 (WML) pages as well as receive SMS text message notifications.
 
\end_layout

\end_deeper
\begin_layout Itemize
Voice
\end_layout

\begin_deeper
\begin_layout Itemize
The voice output system must be able to accurately announce messages.
 The system also must be configurable and have a selection of voices as
 many of the users of the system suffer from forms of hearing loss in some
 frequencies.
\end_layout

\end_deeper
\begin_layout Subsubsection
Hardware Interfaces
\end_layout

\begin_layout Standard
Basically NCS has sensors to get data and actuators to give a physical service.
 To handle getting data and make a service, NCS has a main computer so-called
 Home Server and also terminal so-called client computer to provides an
 user interface.
\end_layout

\begin_layout Standard
Sensors :
\end_layout

\begin_layout Itemize
RFID(location)
\end_layout

\begin_deeper
\begin_layout Itemize
RFID and location sensors check user's position in Smart Home environment.
\end_layout

\end_deeper
\begin_layout Itemize
Motion
\end_layout

\begin_deeper
\begin_layout Itemize
Motion sensor catches user's motion by detects hand motion, eye direction,
 etc.
\end_layout

\end_deeper
\begin_layout Itemize
Smoke, thermal, CO-detector
\end_layout

\begin_deeper
\begin_layout Itemize
Smoke, thermal and CO-detector sensors detect fire.
 
\end_layout

\end_deeper
\begin_layout Itemize
Body sensors(blood pressure, glucometer level, spirometer, pulse oximeter,
 weight scale)
\end_layout

\begin_deeper
\begin_layout Itemize
Body sensors is essential to check the customer's health status.
\end_layout

\end_deeper
\begin_layout Standard
Actuators:
\end_layout

\begin_layout Itemize
Auto door
\end_layout

\begin_deeper
\begin_layout Itemize
Opening and closing a door is challenge for elderly and disability people.
 Auto door provides convenience for them.
\end_layout

\end_deeper
\begin_layout Itemize
Light switch
\end_layout

\begin_deeper
\begin_layout Itemize
Based on user's location and behavior, light system can be smart.
 The system turn on/off lights through the light switch.
\end_layout

\end_deeper
\begin_layout Itemize
Sprinkler
\end_layout

\begin_deeper
\begin_layout Itemize
When the system detects fire, an initial action is very important to prevent
 tragedy.
 Sprinkler system provides water to extinguish fire.
\end_layout

\end_deeper
\begin_layout Itemize
Auto window
\end_layout

\begin_deeper
\begin_layout Itemize
As auto door, auto window provides automatic open/close functions for a
 window.
\end_layout

\end_deeper
\begin_layout Itemize
Alarm(audible, visible)
\end_layout

\begin_deeper
\begin_layout Itemize
If the system detects safety, security or emergency situation, the system
 alert it through the audible and visible alarm actuators.
\end_layout

\end_deeper
\begin_layout Standard
These sensors and actuators are connected to the home server computer through
 OSGi(Open Services Gateway Initiative) interface.
 OSGi supports component-based software.
 OSGi is an open industry framework and service-oriented architecture.
 OSGi also provides deployment of services in platforms.
 OSGi defines a framework to mange bundles (units of distribution) and the
 services they export Services can be obtained by querying the framework
 through a set of properties 
\end_layout

\begin_layout Subsubsection
Software Interfaces
\end_layout

\begin_layout Standard
As the NCS is a subsystem of the Smart Home System, the NCS shall follow
 the standards set forth for the SHS software interfaces.
 Furthermore, the NCS shall provide an a standardized API and protocol that
 will enable other subsystems of the smart home to communicate with it.
 
\end_layout

\begin_layout Standard
The Calendering System shall use the ical file format as defined in RFC
 2445 as its data format for transferring information between itself and
 the rest of the smart home system as well as external systems as defined
 in section 3.1.4.
\end_layout

\begin_layout Standard
The Notification system also shall use an XML file format for communication
 with the rest of the home.
\end_layout

\begin_layout Subsubsection
Communication Interfaces
\end_layout

\begin_layout Itemize
The system shall be connected to the Internet/LAN.
 
\end_layout

\begin_layout Itemize
The system shall connect with the telephone lines.
 
\end_layout

\begin_layout Itemize
The system shall has a connection with an emergency protocol which is connected
 to a hospital, police, and fire station.
\end_layout

\begin_layout Subsection
Classes
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Diagrams/ClassDiagram1.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
ClassDiagram
\end_layout

\begin_layout Subsubsection
Congifuration 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Diagrams/Class-Configuration.jpg

\end_inset


\end_layout

\begin_layout Standard
- notificationInstance : an instance of Notification class.
\end_layout

\begin_layout Standard
- calendarInstance : an instance of Calendar class.
\end_layout

\begin_layout Standard
- userAccessLevel : depends on user levels, configuration access modes are
 different.
 e.g.
 user and system engineer have different userAccessLevel.
\end_layout

\begin_layout Standard
- password : if userAccessLevel is higher than a system engineer, it needs
 password.
\end_layout

\begin_layout Standard
+ configNotiSys() : configure a notification system.
\end_layout

\begin_layout Standard
+ configCalSys() : configure a calculation system.
\end_layout

\begin_layout Standard
+ resetConfigNotiSys() : reset to default settings of a notification system.
\end_layout

\begin_layout Standard
+ resetConfigCalSys() : reset to default settings of a calendaring system.
\end_layout

\begin_layout Standard
+ showMenus() : show menus for configuration
\end_layout

\begin_layout Standard
+ notifySysConfigured() : after configured, notify it to the user.
\end_layout

\begin_layout Subsubsection
Medical consult 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Diagrams/Class-Consult.jpg

\end_inset


\end_layout

\begin_layout Standard
- connection : an instance of Connection Class.
 Connection Class manages network, phone call connections.
\end_layout

\begin_layout Standard
- healthStatus : an instance of HealthStatus.
 It has an information of the user's current health status.
\end_layout

\begin_layout Standard
- consultSchedule : Consulting schedule instance.
\end_layout

\begin_layout Standard
+ callCenter() : call the health center through phone call.
\end_layout

\begin_layout Standard
+ checkConnectionAvailable() : check available connections such as network
 and phone line.
\end_layout

\begin_layout Standard
+ disconnect() : after consulting, disconnect the connection.
\end_layout

\begin_layout Standard
+ connect() : connect to the network to send health status.
\end_layout

\begin_layout Standard
+ sendHealthStatus() : send health status of current user via network.
\end_layout

\begin_layout Standard
+ getConsultSchedule() : getConsultingSchedule information.
\end_layout

\begin_layout Subsubsection
Degraded function mode 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Diagrams/Class-Degraded.jpg

\end_inset


\end_layout

\begin_layout Standard
- systemStatus : represents current system status.
\end_layout

\begin_layout Standard
- hazardLevel : if it is normal status, hazardLevel is 0.
 If there is a hazard shows the hazard level from 1 to 10.
\end_layout

\begin_layout Standard
- degradedLevel : If there is a hazard, change the system mode to this degradedL
evel.
\end_layout

\begin_layout Standard
+ hazardMonitoringThread() : Thread method to constantly check current system
 status.
\end_layout

\begin_layout Standard
+ detectHazard() : a method to detect a hazard.
 
\end_layout

\begin_layout Standard
+ changeMode() : Change a mode to the designated degradedLevel.
\end_layout

\begin_layout Subsubsection
Prioritizer
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Diagrams/Class-Prioritizer.jpg

\end_inset


\end_layout

\begin_layout Standard
Notifier
\end_layout

\begin_layout Standard
- messageQueue : a queue for saving messages to be notified.
\end_layout

\begin_layout Standard
- prioritizer : an instance of Prioritizer class.
\end_layout

\begin_layout Standard
+ Notify() : notify the message.
\end_layout

\begin_layout Standard
+ putMsg() : put message into the queue.
\end_layout

\begin_layout Standard
+ getMSg() : get message from the queue.
\end_layout

\begin_layout Standard
Prioritizer 
\end_layout

\begin_layout Standard
- rules : a list of rules to give a proper priority to the message.
\end_layout

\begin_layout Standard
- getRules() : load rules from the rule XML file.
\end_layout

\begin_layout Standard
- Prioritize() : based on rules, give a proper priority to the message.
\end_layout

\begin_layout Subsection
Scheduler
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Diagrams/SchedulerClassDiagram.png
	scale 50

\end_inset


\end_layout

\begin_layout Itemize
Name : The contact's name
\end_layout

\begin_layout Itemize
date: the date for meeting
\end_layout

\begin_layout Itemize
place: the place of meeting
\end_layout

\begin_layout Itemize
time: time for meeting
\end_layout

\begin_layout Itemize
reason : why have to meet
\end_layout

\begin_layout Itemize
CreateNew(): Create new meeting
\end_layout

\begin_layout Itemize
Modify(): Modify scheduled meeting
\end_layout

\begin_layout Itemize
Search(): Search for a specific meeting
\end_layout

\begin_layout Itemize
UpdateData(): Update database
\end_layout

\begin_layout Subsection
Medical Monitor
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Diagrams/MedicalMonitorClassDiagram.png
	scale 50

\end_inset


\end_layout

\begin_layout Itemize
currentStatus: stored current health status of user
\end_layout

\begin_layout Itemize
TimeUpdate: Specific the period of update info
\end_layout

\begin_layout Itemize
TimeOut: Specific the time out waiting user's response
\end_layout

\begin_layout Itemize
Alarm(): Alarm
\end_layout

\begin_layout Itemize
GetInfo() : get user's health status
\end_layout

\begin_layout Itemize
Warning(): Warning user
\end_layout

\begin_layout Itemize
CheckConsistency() : Check health status user based on information get from
 sensor
\end_layout

\begin_layout Itemize
Pressure : User's pressure
\end_layout

\begin_layout Itemize
GlucometerLevel: User's Glucometer
\end_layout

\begin_layout Itemize
Spirometer: User's spirometer
\end_layout

\begin_layout Itemize
Pulse Level: User's pulse level
\end_layout

\begin_layout Itemize
Weight Scale: User's weight
\end_layout

\begin_layout Subsection
Security Monitor
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Diagrams/SecurityMonitorClassDiagram.png
	scale 50

\end_inset


\end_layout

\begin_layout Itemize
policenumber: store police emergency number - default: 911
\end_layout

\begin_layout Itemize
timeAlarm: set a period of alarm 
\end_layout

\begin_layout Itemize
defaultAction: true - carry on the protection steps for user and house.
\end_layout

\begin_layout Itemize
securityLevel: set specific level of protection
\end_layout

\begin_layout Itemize
SmokeLevel: 
\end_layout

\begin_layout Itemize
Temp : house's temperature 
\end_layout

\begin_layout Itemize
InstrutionDetection : Detect instrution 
\end_layout

\begin_layout Itemize
SmokeLevel
\end_layout

\begin_layout Itemize
WeatherDetector : Check weather in that area
\end_layout

\begin_layout Itemize
TimeUpdate: Specific time of update info
\end_layout

\begin_layout Itemize
GetSensorInfo()
\end_layout

\begin_layout Itemize
SetAlarmTime()
\end_layout

\begin_layout Itemize
CallPolice()
\end_layout

\begin_layout Itemize
NotifyUser()
\end_layout

\begin_layout Itemize
SetSecurityLevel()
\end_layout

\begin_layout Itemize
SetSmokeLevel()
\end_layout

\begin_layout Subsection
User Level Control
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Diagrams/class diagram/UserLevelControl.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
- option : an instance of the setting class.
\end_layout

\begin_layout Standard
+ getSettingList() : get list of available settings for modification.
\end_layout

\begin_layout Standard
+ getSetting(user: userid): get list of available settings for user
\end_layout

\begin_layout Standard
+ setSetting(conf:setting) : commit changes to database.
\end_layout

\begin_layout Subsection
Caretaker Control
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Diagrams/class diagram/CaretakerControl.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
- id : an instance of Userid, this contains user identification.
\end_layout

\begin_layout Standard
option : an instance of the setting class.
\end_layout

\begin_layout Standard
+ getUsers(): get list of available users.
\end_layout

\begin_layout Standard
+ getSettingList() : get list of available settings for modification.
\end_layout

\begin_layout Standard
+ getSetting(user: userid): get list of available settings for user
\end_layout

\begin_layout Standard
+ setSetting(conf:setting) : commit changes to database.
\end_layout

\begin_layout Subsection
Proactive Alert
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Diagrams/class diagram/proactivealert.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
- Trigger : which sensor triggered the notification.
\end_layout

\begin_layout Standard
- event: the event that the sensor is reporting.
\end_layout

\begin_layout Standard
- priority : how important the message is.
\end_layout

\begin_layout Standard
+ trigger(s, e, p) : called by the Active mode of the notification system
 informs us which sensor triggered, what the event was that caused the trigger,
 for example smoke sensor and what priority is the message.
\end_layout

\begin_layout Standard
+respond(userid): the user or caretaker responds to the notification
\end_layout

\begin_layout Standard
+getStatus(): this returns the status of the notification
\end_layout

\begin_layout Subsection
Reactive Alert
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Diagrams/class diagram/proactivealert.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
- event: event is a text stream in the ical file format
\end_layout

\begin_layout Standard
+trigger(): this function is called by the calender system with the ical
 notification statement
\end_layout

\begin_layout Standard
+respond(userid): the user or caretaker responds to the notification
\end_layout

\begin_layout Standard
+getStatus(): this returns the status of the notification
\end_layout

\begin_layout Subsection
Nutrition Monitor/Planner
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Diagrams/NutritionClassDiagram.png
	scale 50

\end_inset


\end_layout

\begin_layout Itemize
DietMode: Diet modes for user
\end_layout

\begin_layout Itemize
Period: Time for current diet mode effective
\end_layout

\begin_layout Itemize
changeDietMode(): change to another diet mode
\end_layout

\begin_layout Itemize
GetHealthInfo() : Get user's health status
\end_layout

\begin_layout Itemize
CalculateHealthStatus
\end_layout

\begin_layout Itemize
NotifyUser() : warning user if anything inconsistency.
\end_layout

\begin_layout Subsection
Performance Requirements
\end_layout

\begin_layout Standard
This sections specify performance requirements for calendering and notification
 sub systems:
\end_layout

\begin_layout Itemize
UI Transition:
\end_layout

\begin_deeper
\begin_layout Standard
The information transfers between any devices (sensors/actuators) with main
 system should not more than 3s.
\end_layout

\end_deeper
\begin_layout Itemize
Data access time: 
\end_layout

\begin_deeper
\begin_layout Standard
The system should access any data from database in reasonable time.
\end_layout

\end_deeper
\begin_layout Itemize
Start-up Time:
\end_layout

\begin_deeper
\begin_layout Standard
The time between system is reset and normally operated should be less than
 10s.
\end_layout

\end_deeper
\begin_layout Itemize
Interoperability: 
\end_layout

\begin_deeper
\begin_layout Standard
The system shall work smoothly with other smart home systems.
\end_layout

\end_deeper
\begin_layout Subsection
Software System Attributes
\end_layout

\begin_layout Subsubsection
Reliability/Dependability 
\end_layout

\begin_layout Standard
The list below describes the requirement of reliability for the calendering
 and notification sub-systems
\end_layout

\begin_layout Itemize
Mean-Time-Between-Failure: 
\end_layout

\begin_deeper
\begin_layout Standard
The failure rate of two sub-system must be below 1 times/month.
\end_layout

\end_deeper
\begin_layout Itemize
Fault-Tolerance:
\end_layout

\begin_deeper
\begin_layout Standard
Sub-system must have a backup copy to continue operation in case the primary
 system fails.
\end_layout

\end_deeper
\begin_layout Itemize
Display data accuracy: 
\end_layout

\begin_deeper
\begin_layout Standard
The information displayed to users via user interface must be correct and
 prompt.
\end_layout

\end_deeper
\begin_layout Itemize
User setting accuracy: 
\end_layout

\begin_deeper
\begin_layout Standard
The information about user's preferences of system must be consistent, reliable
 and up-to-date.
\end_layout

\end_deeper
\begin_layout Itemize
Log accuracy:
\end_layout

\begin_deeper
\begin_layout Standard
The log of everyday operation should be updated by the end of day and backed
 up on the weekend.
\end_layout

\end_deeper
\begin_layout Itemize
Operation accuracy:
\end_layout

\begin_deeper
\begin_layout Standard
Two subsystem must control hardware equipments like sensors and actuators
 precisely and safely.
\end_layout

\end_deeper
\begin_layout Subsubsection
Security
\end_layout

\begin_layout Standard
The list below describes the system requirement about security:
\end_layout

\begin_layout Itemize
Information confidentiality: 
\end_layout

\begin_deeper
\begin_layout Itemize
All information about users should be kept secret by strict information
 protection policy,
\end_layout

\begin_layout Itemize
All information is classified according to clearance level and user's privilege.
\end_layout

\begin_layout Itemize
Never store plain password, and auto-remember user password.
\end_layout

\begin_layout Itemize
Restrict the number of reentering password simultaneously.
\end_layout

\begin_layout Itemize
Using some password protect hardware device like dongle.
\end_layout

\begin_layout Itemize
Implement User Access Control mechanism.
\end_layout

\end_deeper
\begin_layout Itemize
Information Integrity: 
\end_layout

\begin_deeper
\begin_layout Itemize

\series medium
The information
\series default
 can be only modified/deleted by users with specific clearance level.
\end_layout

\begin_layout Itemize
The system is able to detect many unauthorized access, counter password-guessing
 technique, defend from outside attacks.
\end_layout

\begin_layout Itemize
The system shall always synchronize data between prime-copy and back-up
 copy in every short period.
\end_layout

\end_deeper
\begin_layout Itemize
Information Availability:
\end_layout

\begin_deeper
\begin_layout Itemize
The system must provide information to right user with enough privilege
 in timely manner.
\end_layout

\begin_layout Itemize
Always have a backup plan in every weak/month.
\end_layout

\end_deeper
\begin_layout Subsubsection
Availability
\end_layout

\begin_layout Standard
The list below describes availability requirement:
\end_layout

\begin_layout Itemize
The system shall provide the requested service with 24/7avalability.
\end_layout

\begin_layout Itemize
The response time of the system when a request arrive should be prompt and
 precise.
\end_layout

\begin_layout Subsubsection
Maintainability
\end_layout

\begin_layout Standard
The list below describes maintainability requirement:
\end_layout

\begin_layout Itemize
The system shall have a backup system to be upgraded parallel/on-line when
 a new device comes or some modification taken by technician.
\end_layout

\begin_deeper
\begin_layout Itemize
The display device can be removed when an user still can issues command
\end_layout

\begin_layout Itemize
A new sensor can be added to the system without any conflict in communication
 and transmission.
\end_layout

\begin_layout Itemize
Every sensor and actuator can be configured and controller via GUI.
\end_layout

\end_deeper
\begin_layout Itemize
The system will introduce bugs with very low probability when updating changes.
\end_layout

\begin_deeper
\begin_layout Itemize
The audit team can review source code and run code in simulation devices.
\end_layout

\begin_layout Itemize
The system is able to update new code with any disruption.
\end_layout

\end_deeper
\begin_layout Subsubsection
Repair-ability:
\end_layout

\begin_layout Standard
The list below describes repair-ability requirement:
\end_layout

\begin_layout Itemize
The system shall have a quick repair down time.
\end_layout

\begin_layout Itemize
The system shall be able to be diagnose and replace malfunctioning parts
 while still running.
\end_layout

\begin_layout Subsection
Design Constraints 
\end_layout

\begin_layout Standard
The list below describes about design constrains in some aspects:
\end_layout

\begin_layout Itemize
Coding Constraint:
\end_layout

\begin_deeper
\begin_layout Standard
Two sub systems shall be developed using Java language.
\end_layout

\end_deeper
\begin_layout Itemize
Memory Constraint:
\end_layout

\begin_deeper
\begin_layout Standard
The memory for all two subsystem shall not be larger than 1Gb.
\end_layout

\end_deeper
\begin_layout Itemize
Line of code constraint:
\end_layout

\begin_deeper
\begin_layout Standard
The total number of LOC should less than 100K.
\end_layout

\end_deeper
\begin_layout Itemize
Functionality constraint:
\end_layout

\begin_deeper
\begin_layout Standard
Two sub system shall provide ONLY functions required in the requirement
 
\end_layout

\end_deeper
\begin_layout Itemize
Environment constraint:
\end_layout

\begin_deeper
\begin_layout Standard
sub systems shall be developed under Windows NT OS.
\end_layout

\end_deeper
\begin_layout Itemize
The interface between components shall be consistent and well described.
\end_layout

\begin_layout Subsection
Other Requirements 
\end_layout

\begin_layout Standard
NONE
\end_layout

\end_body
\end_document
